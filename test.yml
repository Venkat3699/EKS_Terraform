name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:  # Allows manual execution

jobs:
  checkout:
    name: 'Code Checkout Repository'
    runs-on: terraform_runner
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-south-1'

    - name: 'Verify AWS Credentials'
      run: |
        aws sts get-caller-identity

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.11.3'
      
    - name: Terraform Init
      run: terraform init

    - name: Terraform Format (Auto-fix)
      run: terraform fmt -recursive

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate

    - name: 'Install TFLint'
      run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          echo "$HOME/.tflint/bin" >> $GITHUB_PATH  # Ensure it's available in the PATH
          export PATH=$HOME/.tflint/bin:$PATH       # Immediate path update
          tflint --version  # Verify installation
      
    - name: 'TFLint'
      run: |
          tflint --init
          tflint

    - name: 'Install tfsec'
      run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/
          tfsec --version

    - name: 'Run tfsec and Save Output'
      run: |
        tfsec . --format text | tee tfsec-table.txt || true
        tfsec . --format json > tfsec.json || true


    - name: 'Terraform Plan'
      run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          terraform plan -out=tfplan

  terraform-apply: 
    name: 'Terraform Apply'
    runs-on: terraform_runner
    needs: checkout
    if: github.ref == 'refs/heads/master'
    steps:
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: 'Verify AWS Credentials'
        run: aws sts get-caller-identity  # Check if AWS credentials are valid

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve tfplan


  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: terraform_runner
    needs: terraform-apply
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: 'Verify AWS Credentials'
        run: aws sts get-caller-identity  # Ensure credentials are valid

      - name: 'Terraform Destroy'
        run: terraform destroy -auto-approve